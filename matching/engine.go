package matching

import (
	"github.com/CheetahExchange/CheetahExchange/models"
	logger "github.com/siddontang/go-log/log"
	"time"
)

type Engine struct {
	// The productId is a unique identifier for an engine, and each product corresponds to an engine.
	productId string

	// The engine holds the orderBook, which corresponds to the product, and needs to be snapshot and restored from the snapshot
	OrderBook *orderBook

	// Used to read the order from kafka
	orderReader OrderReader

	// Retrieve the starting offset of the order, which will be restored from the snapshot the first time it is launched
	orderOffset int64

	// The read order will be written to chan, and the order will be written with the offset of the order.
	orderCh chan *offsetOrder

	// Used to store the matching log to kafka
	logStore LogStore

	// log write queue, all the logs to be written need to enter the chan wait
	logCh chan Log

	// To initiate a snapshot request, you need to carry the offset of the last snapshot
	snapshotReqCh chan *Snapshot

	// The snapshot is completely ready, and you need to make sure that all data prior to the snapshot has been committed
	snapshotApproveReqCh chan *Snapshot

	// Snapshot data is ready and all data prior to the snapshot has been stored.
	snapshotCh chan *Snapshot

	// The storage method of the persistent snapshot, should support a variety of ways, such as local disk, redis, etc.
	snapshotStore SnapshotStore
}

// A snapshot is the consistent memory state of an engine at a given time
type Snapshot struct {
	OrderBookSnapshot orderBookSnapshot
	OrderOffset       int64
}

type offsetOrder struct {
	Offset int64
	Order  *models.Order
}

func NewEngine(product *models.Product, orderReader OrderReader, logStore LogStore, snapshotStore SnapshotStore) *Engine {
	e := &Engine{
		productId:            product.Id,
		OrderBook:            NewOrderBook(product),
		logCh:                make(chan Log, 10000),
		orderCh:              make(chan *offsetOrder, 10000),
		snapshotReqCh:        make(chan *Snapshot, 32),
		snapshotApproveReqCh: make(chan *Snapshot, 32),
		snapshotCh:           make(chan *Snapshot, 32),
		snapshotStore:        snapshotStore,
		orderReader:          orderReader,
		logStore:             logStore,
	}

	// Getting the latest snapshot and using the snapshot for recovery
	snapshot, err := snapshotStore.GetLatest()
	if err != nil {
		logger.Fatalf("get latest snapshot error: %v", err)
	}
	if snapshot != nil {
		e.restore(snapshot)
	}
	return e
}

func (e *Engine) Start() {
	go e.runFetcher()
	go e.runApplier()
	go e.runCommitter()
	go e.runSnapshots()
}

// Responsible for constantly pulling the Order and writing to the chan
func (e *Engine) runFetcher() {
	var offset = e.orderOffset
	if offset > 0 {
		offset = offset + 1
	}
	err := e.orderReader.SetOffset(offset)
	if err != nil {
		logger.Fatalf("set order reader offset error: %v", err)
	}

	for {
		offset, order, err := e.orderReader.FetchOrder()
		if err != nil {
			logger.Error(err)
			continue
		}
		e.orderCh <- &offsetOrder{offset, order}
	}
}

// Fetches the order from the local queue, performs the orderBook operation, and responds to the snapshot request at the same time.
func (e *Engine) runApplier() {
	var orderOffset int64

	for {
		select {
		case offsetOrder := <-e.orderCh:
			// apply or cancel order
			var logs []Log
			if offsetOrder.Order.Status == models.OrderStatusCancelling {
				logs = e.OrderBook.CancelOrder(offsetOrder.Order)
			} else {
				if offsetOrder.Order.TimeInForce == models.ImmediateOrCancel {
					// IOC
					logs = e.OrderBook.ApplyOrder(offsetOrder.Order)
					// cancel the rest size
					iocLogs := e.OrderBook.CancelOrder(offsetOrder.Order)
					if len(iocLogs) != 0 {
						logs = append(logs, iocLogs...)
					}
				} else if offsetOrder.Order.TimeInForce == models.GoodTillCrossing {
					// GTX
					if e.OrderBook.IsOrderWillNotMatch(offsetOrder.Order) {
						logs = e.OrderBook.ApplyOrder(offsetOrder.Order)
					} else {
						logs = e.OrderBook.NullifyOrder(offsetOrder.Order)
					}
				} else if offsetOrder.Order.TimeInForce == models.FillOrKill {
					// FOK
					if e.OrderBook.IsOrderWillFullMatch(offsetOrder.Order) {
						logs = e.OrderBook.ApplyOrder(offsetOrder.Order)
					} else {
						logs = e.OrderBook.NullifyOrder(offsetOrder.Order)
					}
				} else if offsetOrder.Order.TimeInForce == models.GoodTillCanceled {
					// GTC
					logs = e.OrderBook.ApplyOrder(offsetOrder.Order)
				}
			}

			// Write the log generated by orderBook to chan for persistence
			for _, log := range logs {
				e.logCh <- log
			}

			// Record the offset of the order to determine if a snapshot is needed.
			orderOffset = offsetOrder.Offset

		case snapshot := <-e.snapshotReqCh:
			// Receive a request for a snapshot and determine if the snapshot really needs to be executed
			delta := orderOffset - snapshot.OrderOffset
			if delta <= 1000 {
				continue
			}

			logger.Infof("should take snapshot: %v %v-[%v]-%v->",
				e.productId, snapshot.OrderOffset, delta, orderOffset)

			// Execute the snapshot and write the snapshot data to the approval chan
			snapshot.OrderBookSnapshot = e.OrderBook.Snapshot()
			snapshot.OrderOffset = orderOffset
			e.snapshotApproveReqCh <- snapshot
		}
	}
}

// Persist the log generated by orderBook, and also need to respond to snapshot approvals
func (e *Engine) runCommitter() {
	var seq = e.OrderBook.logSeq
	var pending *Snapshot = nil
	var logs []interface{}

	for {
		select {
		case log := <-e.logCh:
			// discard duplicate log
			if log.GetSeq() <= seq {
				logger.Infof("discard log seq=%v", seq)
				continue
			}

			seq = log.GetSeq()
			logs = append(logs, log)

			// chan is not empty and buffer is not full, continue read.
			if len(e.logCh) > 0 && len(logs) < 100 {
				continue
			}

			// store log, clean buffer
			err := e.logStore.Store(logs)
			if err != nil {
				panic(err)
			}
			logs = nil

			// approve pending snapshot
			if pending != nil && seq >= pending.OrderBookSnapshot.LogSeq {
				e.snapshotCh <- pending
				pending = nil
			}

		case snapshot := <-e.snapshotApproveReqCh:
			// The write seq has reached or exceeded the snapshot's seq, approving the snapshot request
			if seq >= snapshot.OrderBookSnapshot.LogSeq {
				e.snapshotCh <- snapshot
				pending = nil
				continue
			}

			// There are currently unapproved snapshots, but there is a new snapshot request, discard the old request
			if pending != nil {
				logger.Infof("discard snapshot request (seq=%v), new one (seq=%v) received",
					pending.OrderBookSnapshot.LogSeq, snapshot.OrderBookSnapshot.LogSeq)
			}
			pending = snapshot
		}
	}
}

// Timed initiation of snapshot requests and responsibility for persisting approved snapshots
func (e *Engine) runSnapshots() {
	// order orderOffset at the time of the last snapshot
	orderOffset := e.orderOffset

	for {
		select {
		case <-time.After(30 * time.Second):
			// make a new snapshot request
			e.snapshotReqCh <- &Snapshot{
				OrderOffset: orderOffset,
			}

		case snapshot := <-e.snapshotCh:
			// store snapshot
			err := e.snapshotStore.Store(snapshot)
			if err != nil {
				logger.Warnf("store snapshot failed: %v", err)
				continue
			}
			logger.Infof("new snapshot stored :product=%v OrderOffset=%v LogSeq=%v",
				e.productId, snapshot.OrderOffset, snapshot.OrderBookSnapshot.LogSeq)

			// update offset for next snapshot request
			orderOffset = snapshot.OrderOffset
		}
	}
}

func (e *Engine) restore(snapshot *Snapshot) {
	logger.Infof("restoring: %+v", *snapshot)
	e.orderOffset = snapshot.OrderOffset
	e.OrderBook.Restore(&snapshot.OrderBookSnapshot)
}
